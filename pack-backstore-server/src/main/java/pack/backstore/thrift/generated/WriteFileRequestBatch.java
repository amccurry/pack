/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pack.backstore.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-15")
public class WriteFileRequestBatch implements org.apache.thrift.TBase<WriteFileRequestBatch, WriteFileRequestBatch._Fields>, java.io.Serializable, Cloneable, Comparable<WriteFileRequestBatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteFileRequestBatch");

  private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOCK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("lockId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WRITE_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("writeRequests", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WriteFileRequestBatchStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WriteFileRequestBatchTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String filename; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String lockId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<WriteRequest> writeRequests; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FILENAME((short)1, "filename"),
    LOCK_ID((short)2, "lockId"),
    WRITE_REQUESTS((short)3, "writeRequests");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FILENAME
          return FILENAME;
        case 2: // LOCK_ID
          return LOCK_ID;
        case 3: // WRITE_REQUESTS
          return WRITE_REQUESTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOCK_ID, new org.apache.thrift.meta_data.FieldMetaData("lockId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WRITE_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("writeRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WriteRequest.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteFileRequestBatch.class, metaDataMap);
  }

  public WriteFileRequestBatch() {
  }

  public WriteFileRequestBatch(
    java.lang.String filename,
    java.lang.String lockId,
    java.util.List<WriteRequest> writeRequests)
  {
    this();
    this.filename = filename;
    this.lockId = lockId;
    this.writeRequests = writeRequests;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WriteFileRequestBatch(WriteFileRequestBatch other) {
    if (other.isSetFilename()) {
      this.filename = other.filename;
    }
    if (other.isSetLockId()) {
      this.lockId = other.lockId;
    }
    if (other.isSetWriteRequests()) {
      java.util.List<WriteRequest> __this__writeRequests = new java.util.ArrayList<WriteRequest>(other.writeRequests.size());
      for (WriteRequest other_element : other.writeRequests) {
        __this__writeRequests.add(new WriteRequest(other_element));
      }
      this.writeRequests = __this__writeRequests;
    }
  }

  public WriteFileRequestBatch deepCopy() {
    return new WriteFileRequestBatch(this);
  }

  @Override
  public void clear() {
    this.filename = null;
    this.lockId = null;
    this.writeRequests = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getFilename() {
    return this.filename;
  }

  public WriteFileRequestBatch setFilename(@org.apache.thrift.annotation.Nullable java.lang.String filename) {
    this.filename = filename;
    return this;
  }

  public void unsetFilename() {
    this.filename = null;
  }

  /** Returns true if field filename is set (has been assigned a value) and false otherwise */
  public boolean isSetFilename() {
    return this.filename != null;
  }

  public void setFilenameIsSet(boolean value) {
    if (!value) {
      this.filename = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLockId() {
    return this.lockId;
  }

  public WriteFileRequestBatch setLockId(@org.apache.thrift.annotation.Nullable java.lang.String lockId) {
    this.lockId = lockId;
    return this;
  }

  public void unsetLockId() {
    this.lockId = null;
  }

  /** Returns true if field lockId is set (has been assigned a value) and false otherwise */
  public boolean isSetLockId() {
    return this.lockId != null;
  }

  public void setLockIdIsSet(boolean value) {
    if (!value) {
      this.lockId = null;
    }
  }

  public int getWriteRequestsSize() {
    return (this.writeRequests == null) ? 0 : this.writeRequests.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<WriteRequest> getWriteRequestsIterator() {
    return (this.writeRequests == null) ? null : this.writeRequests.iterator();
  }

  public void addToWriteRequests(WriteRequest elem) {
    if (this.writeRequests == null) {
      this.writeRequests = new java.util.ArrayList<WriteRequest>();
    }
    this.writeRequests.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<WriteRequest> getWriteRequests() {
    return this.writeRequests;
  }

  public WriteFileRequestBatch setWriteRequests(@org.apache.thrift.annotation.Nullable java.util.List<WriteRequest> writeRequests) {
    this.writeRequests = writeRequests;
    return this;
  }

  public void unsetWriteRequests() {
    this.writeRequests = null;
  }

  /** Returns true if field writeRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteRequests() {
    return this.writeRequests != null;
  }

  public void setWriteRequestsIsSet(boolean value) {
    if (!value) {
      this.writeRequests = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FILENAME:
      if (value == null) {
        unsetFilename();
      } else {
        setFilename((java.lang.String)value);
      }
      break;

    case LOCK_ID:
      if (value == null) {
        unsetLockId();
      } else {
        setLockId((java.lang.String)value);
      }
      break;

    case WRITE_REQUESTS:
      if (value == null) {
        unsetWriteRequests();
      } else {
        setWriteRequests((java.util.List<WriteRequest>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FILENAME:
      return getFilename();

    case LOCK_ID:
      return getLockId();

    case WRITE_REQUESTS:
      return getWriteRequests();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FILENAME:
      return isSetFilename();
    case LOCK_ID:
      return isSetLockId();
    case WRITE_REQUESTS:
      return isSetWriteRequests();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WriteFileRequestBatch)
      return this.equals((WriteFileRequestBatch)that);
    return false;
  }

  public boolean equals(WriteFileRequestBatch that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_filename = true && this.isSetFilename();
    boolean that_present_filename = true && that.isSetFilename();
    if (this_present_filename || that_present_filename) {
      if (!(this_present_filename && that_present_filename))
        return false;
      if (!this.filename.equals(that.filename))
        return false;
    }

    boolean this_present_lockId = true && this.isSetLockId();
    boolean that_present_lockId = true && that.isSetLockId();
    if (this_present_lockId || that_present_lockId) {
      if (!(this_present_lockId && that_present_lockId))
        return false;
      if (!this.lockId.equals(that.lockId))
        return false;
    }

    boolean this_present_writeRequests = true && this.isSetWriteRequests();
    boolean that_present_writeRequests = true && that.isSetWriteRequests();
    if (this_present_writeRequests || that_present_writeRequests) {
      if (!(this_present_writeRequests && that_present_writeRequests))
        return false;
      if (!this.writeRequests.equals(that.writeRequests))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFilename()) ? 131071 : 524287);
    if (isSetFilename())
      hashCode = hashCode * 8191 + filename.hashCode();

    hashCode = hashCode * 8191 + ((isSetLockId()) ? 131071 : 524287);
    if (isSetLockId())
      hashCode = hashCode * 8191 + lockId.hashCode();

    hashCode = hashCode * 8191 + ((isSetWriteRequests()) ? 131071 : 524287);
    if (isSetWriteRequests())
      hashCode = hashCode * 8191 + writeRequests.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WriteFileRequestBatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLockId()).compareTo(other.isSetLockId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockId, other.lockId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWriteRequests()).compareTo(other.isSetWriteRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeRequests, other.writeRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WriteFileRequestBatch(");
    boolean first = true;

    sb.append("filename:");
    if (this.filename == null) {
      sb.append("null");
    } else {
      sb.append(this.filename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lockId:");
    if (this.lockId == null) {
      sb.append("null");
    } else {
      sb.append(this.lockId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeRequests:");
    if (this.writeRequests == null) {
      sb.append("null");
    } else {
      sb.append(this.writeRequests);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WriteFileRequestBatchStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WriteFileRequestBatchStandardScheme getScheme() {
      return new WriteFileRequestBatchStandardScheme();
    }
  }

  private static class WriteFileRequestBatchStandardScheme extends org.apache.thrift.scheme.StandardScheme<WriteFileRequestBatch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WriteFileRequestBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FILENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filename = iprot.readString();
              struct.setFilenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lockId = iprot.readString();
              struct.setLockIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WRITE_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.writeRequests = new java.util.ArrayList<WriteRequest>(_list16.size);
                @org.apache.thrift.annotation.Nullable WriteRequest _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new WriteRequest();
                  _elem17.read(iprot);
                  struct.writeRequests.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setWriteRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WriteFileRequestBatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.filename != null) {
        oprot.writeFieldBegin(FILENAME_FIELD_DESC);
        oprot.writeString(struct.filename);
        oprot.writeFieldEnd();
      }
      if (struct.lockId != null) {
        oprot.writeFieldBegin(LOCK_ID_FIELD_DESC);
        oprot.writeString(struct.lockId);
        oprot.writeFieldEnd();
      }
      if (struct.writeRequests != null) {
        oprot.writeFieldBegin(WRITE_REQUESTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.writeRequests.size()));
          for (WriteRequest _iter19 : struct.writeRequests)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WriteFileRequestBatchTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WriteFileRequestBatchTupleScheme getScheme() {
      return new WriteFileRequestBatchTupleScheme();
    }
  }

  private static class WriteFileRequestBatchTupleScheme extends org.apache.thrift.scheme.TupleScheme<WriteFileRequestBatch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WriteFileRequestBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFilename()) {
        optionals.set(0);
      }
      if (struct.isSetLockId()) {
        optionals.set(1);
      }
      if (struct.isSetWriteRequests()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFilename()) {
        oprot.writeString(struct.filename);
      }
      if (struct.isSetLockId()) {
        oprot.writeString(struct.lockId);
      }
      if (struct.isSetWriteRequests()) {
        {
          oprot.writeI32(struct.writeRequests.size());
          for (WriteRequest _iter20 : struct.writeRequests)
          {
            _iter20.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WriteFileRequestBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.filename = iprot.readString();
        struct.setFilenameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lockId = iprot.readString();
        struct.setLockIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.writeRequests = new java.util.ArrayList<WriteRequest>(_list21.size);
          @org.apache.thrift.annotation.Nullable WriteRequest _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new WriteRequest();
            _elem22.read(iprot);
            struct.writeRequests.add(_elem22);
          }
        }
        struct.setWriteRequestsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

