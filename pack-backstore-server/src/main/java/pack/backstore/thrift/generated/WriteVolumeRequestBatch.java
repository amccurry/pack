/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package pack.backstore.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-15")
public class WriteVolumeRequestBatch implements org.apache.thrift.TBase<WriteVolumeRequestBatch, WriteVolumeRequestBatch._Fields>, java.io.Serializable, Cloneable, Comparable<WriteVolumeRequestBatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteVolumeRequestBatch");

  private static final org.apache.thrift.protocol.TField VOLUME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField WRITE_REQUESTS_FIELD_DESC = new org.apache.thrift.protocol.TField("writeRequests", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WriteVolumeRequestBatchStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WriteVolumeRequestBatchTupleSchemeFactory();

  public long volumeId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<WriteRequest> writeRequests; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VOLUME_ID((short)1, "volumeId"),
    WRITE_REQUESTS((short)2, "writeRequests");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VOLUME_ID
          return VOLUME_ID;
        case 2: // WRITE_REQUESTS
          return WRITE_REQUESTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUMEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VOLUME_ID, new org.apache.thrift.meta_data.FieldMetaData("volumeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.WRITE_REQUESTS, new org.apache.thrift.meta_data.FieldMetaData("writeRequests", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WriteRequest.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteVolumeRequestBatch.class, metaDataMap);
  }

  public WriteVolumeRequestBatch() {
  }

  public WriteVolumeRequestBatch(
    long volumeId,
    java.util.List<WriteRequest> writeRequests)
  {
    this();
    this.volumeId = volumeId;
    setVolumeIdIsSet(true);
    this.writeRequests = writeRequests;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WriteVolumeRequestBatch(WriteVolumeRequestBatch other) {
    __isset_bitfield = other.__isset_bitfield;
    this.volumeId = other.volumeId;
    if (other.isSetWriteRequests()) {
      java.util.List<WriteRequest> __this__writeRequests = new java.util.ArrayList<WriteRequest>(other.writeRequests.size());
      for (WriteRequest other_element : other.writeRequests) {
        __this__writeRequests.add(new WriteRequest(other_element));
      }
      this.writeRequests = __this__writeRequests;
    }
  }

  public WriteVolumeRequestBatch deepCopy() {
    return new WriteVolumeRequestBatch(this);
  }

  @Override
  public void clear() {
    setVolumeIdIsSet(false);
    this.volumeId = 0;
    this.writeRequests = null;
  }

  public long getVolumeId() {
    return this.volumeId;
  }

  public WriteVolumeRequestBatch setVolumeId(long volumeId) {
    this.volumeId = volumeId;
    setVolumeIdIsSet(true);
    return this;
  }

  public void unsetVolumeId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VOLUMEID_ISSET_ID);
  }

  /** Returns true if field volumeId is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VOLUMEID_ISSET_ID);
  }

  public void setVolumeIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VOLUMEID_ISSET_ID, value);
  }

  public int getWriteRequestsSize() {
    return (this.writeRequests == null) ? 0 : this.writeRequests.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<WriteRequest> getWriteRequestsIterator() {
    return (this.writeRequests == null) ? null : this.writeRequests.iterator();
  }

  public void addToWriteRequests(WriteRequest elem) {
    if (this.writeRequests == null) {
      this.writeRequests = new java.util.ArrayList<WriteRequest>();
    }
    this.writeRequests.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<WriteRequest> getWriteRequests() {
    return this.writeRequests;
  }

  public WriteVolumeRequestBatch setWriteRequests(@org.apache.thrift.annotation.Nullable java.util.List<WriteRequest> writeRequests) {
    this.writeRequests = writeRequests;
    return this;
  }

  public void unsetWriteRequests() {
    this.writeRequests = null;
  }

  /** Returns true if field writeRequests is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteRequests() {
    return this.writeRequests != null;
  }

  public void setWriteRequestsIsSet(boolean value) {
    if (!value) {
      this.writeRequests = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case VOLUME_ID:
      if (value == null) {
        unsetVolumeId();
      } else {
        setVolumeId((java.lang.Long)value);
      }
      break;

    case WRITE_REQUESTS:
      if (value == null) {
        unsetWriteRequests();
      } else {
        setWriteRequests((java.util.List<WriteRequest>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VOLUME_ID:
      return getVolumeId();

    case WRITE_REQUESTS:
      return getWriteRequests();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VOLUME_ID:
      return isSetVolumeId();
    case WRITE_REQUESTS:
      return isSetWriteRequests();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof WriteVolumeRequestBatch)
      return this.equals((WriteVolumeRequestBatch)that);
    return false;
  }

  public boolean equals(WriteVolumeRequestBatch that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_volumeId = true;
    boolean that_present_volumeId = true;
    if (this_present_volumeId || that_present_volumeId) {
      if (!(this_present_volumeId && that_present_volumeId))
        return false;
      if (this.volumeId != that.volumeId)
        return false;
    }

    boolean this_present_writeRequests = true && this.isSetWriteRequests();
    boolean that_present_writeRequests = true && that.isSetWriteRequests();
    if (this_present_writeRequests || that_present_writeRequests) {
      if (!(this_present_writeRequests && that_present_writeRequests))
        return false;
      if (!this.writeRequests.equals(that.writeRequests))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(volumeId);

    hashCode = hashCode * 8191 + ((isSetWriteRequests()) ? 131071 : 524287);
    if (isSetWriteRequests())
      hashCode = hashCode * 8191 + writeRequests.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(WriteVolumeRequestBatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetVolumeId()).compareTo(other.isSetVolumeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeId, other.volumeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWriteRequests()).compareTo(other.isSetWriteRequests());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteRequests()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeRequests, other.writeRequests);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("WriteVolumeRequestBatch(");
    boolean first = true;

    sb.append("volumeId:");
    sb.append(this.volumeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeRequests:");
    if (this.writeRequests == null) {
      sb.append("null");
    } else {
      sb.append(this.writeRequests);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WriteVolumeRequestBatchStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WriteVolumeRequestBatchStandardScheme getScheme() {
      return new WriteVolumeRequestBatchStandardScheme();
    }
  }

  private static class WriteVolumeRequestBatchStandardScheme extends org.apache.thrift.scheme.StandardScheme<WriteVolumeRequestBatch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WriteVolumeRequestBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VOLUME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.volumeId = iprot.readI64();
              struct.setVolumeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WRITE_REQUESTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.writeRequests = new java.util.ArrayList<WriteRequest>(_list48.size);
                @org.apache.thrift.annotation.Nullable WriteRequest _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new WriteRequest();
                  _elem49.read(iprot);
                  struct.writeRequests.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setWriteRequestsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WriteVolumeRequestBatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VOLUME_ID_FIELD_DESC);
      oprot.writeI64(struct.volumeId);
      oprot.writeFieldEnd();
      if (struct.writeRequests != null) {
        oprot.writeFieldBegin(WRITE_REQUESTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.writeRequests.size()));
          for (WriteRequest _iter51 : struct.writeRequests)
          {
            _iter51.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WriteVolumeRequestBatchTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WriteVolumeRequestBatchTupleScheme getScheme() {
      return new WriteVolumeRequestBatchTupleScheme();
    }
  }

  private static class WriteVolumeRequestBatchTupleScheme extends org.apache.thrift.scheme.TupleScheme<WriteVolumeRequestBatch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WriteVolumeRequestBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVolumeId()) {
        optionals.set(0);
      }
      if (struct.isSetWriteRequests()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVolumeId()) {
        oprot.writeI64(struct.volumeId);
      }
      if (struct.isSetWriteRequests()) {
        {
          oprot.writeI32(struct.writeRequests.size());
          for (WriteRequest _iter52 : struct.writeRequests)
          {
            _iter52.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WriteVolumeRequestBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.volumeId = iprot.readI64();
        struct.setVolumeIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.writeRequests = new java.util.ArrayList<WriteRequest>(_list53.size);
          @org.apache.thrift.annotation.Nullable WriteRequest _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new WriteRequest();
            _elem54.read(iprot);
            struct.writeRequests.add(_elem54);
          }
        }
        struct.setWriteRequestsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

